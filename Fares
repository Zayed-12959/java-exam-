import java.util.*;


abstract class Person {
    protected String name;
    protected double distance;

    public Person(String name, double distance) {
        this.name = name;
        this.distance = distance;
    }

    public abstract double calculateFare();

    public void displayFare() {
        System.out.println(name + " has to pay " + calculateFare() + " taka.");
    }
}


class Student extends Person {
    public Student(String name, double distance) {
        super(name, distance);
    }

    @Override
    public double calculateFare() {
        double total = distance * 1.0;
        return total - (total * 0.30);
    }
}


class Doctor extends Person {
    public Doctor(String name, double distance) {
        super(name, distance);
    }

    @Override
    public double calculateFare() {
        double total = distance * 1.0;
        return total - (total * 0.15);
    }
}


class Other extends Person {
    public Other(String name, double distance) {
        super(name, distance);
    }

    @Override
    public double calculateFare() {
        return distance * 1.0;
    }
}


public class Main {
    public static void main(String[] args) {
        ArrayList<Person> passengers = new ArrayList<>();
        passengers.add(new Student("Rafi", 10));
        passengers.add(new Doctor("Tania", 15));
        passengers.add(new Other("Rahim", 8));

        System.out.println("=== BUS FARE CALCULATION ===");
        for (int i = 0; i < passengers.size(); i++) {
            Person p = passengers.get(i);   // Dynamic Method Dispatch
            p.displayFare();                // Polymorphism
        }
    }
}
